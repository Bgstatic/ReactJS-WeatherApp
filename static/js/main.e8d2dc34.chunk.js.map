{"version":3,"sources":["components/WeatherDetails.js","services/fetchWeather.js","services/fetchPhotos.js","components/Navbar.js","utilities/matchIcons.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["WeatherDetails","weather","defaultData","className","current","cloudcover","humidity","wind_speed","fetchWeather","query","a","axios","get","params","units","access_key","data","fetchPhotos","client_id","Navbar","getData","getImage","useState","setQuery","setWeather","image","setImage","search","e","key","WeatherData","ImageLocation","results","clickText","useEffect","Input","placeholder","value","onChange","target","onKeyPress","onClick","textContent","backgroundImage","matchIcons","subText","undefined","indexOf","Weather","dataDesc","weather_descriptions","defaultDesc","temperature","location","name","localtime","src","alt","App","setData","defaultImage","setDefaultImage","setDefaultData","getDefault","getDefaultImage","preImage","backgroundImageLink","Math","floor","random","urls","full","style","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0VAqEeA,MAlEf,YAAmD,IAAD,YAAxBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,YACjC,OACE,yBAAKC,UAAU,8BACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,SACb,gDAEF,+BACA,+BACA,gCAEF,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,UACb,uCAEF,+BACA,+BACA,yBAAKA,UAAU,iBACb,4BACGF,EAAQG,QAAR,UACGH,EAAQG,eADX,aACG,EAAiBC,WADpB,UAEGH,EAAYE,eAFf,aAEG,EAAqBC,WAH3B,OAQJ,yBAAKF,UAAU,6BACb,yBAAKA,UAAU,YACb,yCAEF,+BACA,+BACA,yBAAKA,UAAU,mBACb,4BACGF,EAAQG,QAAR,UACGH,EAAQG,eADX,aACG,EAAiBE,SADpB,UAEGJ,EAAYE,eAFf,aAEG,EAAqBE,SAH3B,OAQJ,yBAAKH,UAAU,yBACb,yBAAKA,UAAU,QACb,qCAEF,+BACA,+BACA,yBAAKA,UAAU,eACb,4BACGF,EAAQG,QAAR,UACGH,EAAQG,eADX,aACG,EAAiBG,WADpB,UAEGL,EAAYE,eAFf,aAEG,EAAqBG,WAH3B,UAQJ,yBAAKJ,UAAU,yBACb,yBAAKA,UAAU,SACf,+BACA,+BACA,yBAAKA,UAAU,mB,iBC1DVK,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACHC,IAAMC,IAJnB,sCAI4B,CACpCC,OAAQ,CACNJ,MAAOA,EACPK,MAAO,IACPC,WAPU,sCAEY,uBAClBC,EADkB,EAClBA,KADkB,kBAQnBA,GARmB,2CAAH,sD,yBCAZC,G,MAAW,uCAAG,WAAOR,GAAP,iBAAAC,EAAA,sEACFC,IAAMC,IAJnB,yCAI4B,CACpCC,OAAQ,CACNJ,MAAOA,EACPS,UANU,iDAEW,uBACjBF,EADiB,EACjBA,KADiB,kBAOlBA,GAPkB,2CAAH,uDCyDTG,MAtDf,YAAqD,IAAnCC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,SAAUnB,EAAe,EAAfA,YAAe,EACxBoB,mBAAS,IADe,mBAC3Cb,EAD2C,KACpCc,EADoC,OAEpBD,mBAAS,IAFW,mBAE3CrB,EAF2C,KAElCuB,EAFkC,OAGxBF,mBAAS,IAHe,mBAG3CG,EAH2C,KAGpCC,EAHoC,KAK5CC,EAAM,uCAAG,WAAOC,GAAP,iBAAAlB,EAAA,yDACC,UAAVkB,EAAEC,IADO,iCAEerB,EAAaC,GAF5B,cAELqB,EAFK,gBAGiBb,EAAYR,GAH7B,OAGLsB,EAHK,OAIXL,EAASK,EAAcC,SACvBR,EAAWM,GACXP,EAAS,IANE,4CAAH,sDAUNU,EAAS,uCAAG,WAAOxB,GAAP,iBAAAC,EAAA,sEACUF,EAAaC,GADvB,cACVqB,EADU,gBAEYb,EAAYR,GAFxB,OAEVsB,EAFU,OAGhBL,EAASK,EAAcC,SACvBR,EAAWM,GACXP,EAAS,IALO,2CAAH,sDAaf,OALAW,qBAAU,WACRb,EAASI,GACTL,EAAQnB,KACP,CAACmB,EAASC,EAAUI,EAAOxB,IAG5B,yBAAKE,UAAU,mBACb,yBAAKA,UAAU,6BACb,kBAACgC,EAAA,EAAD,CACEhC,UAAU,gBACViC,YAAY,mBACZC,MAAO5B,EACP6B,SAAU,SAACV,GAAD,OAAOL,EAASK,EAAEW,OAAOF,QACnCG,WAAYb,IAEd,kBAAC,IAAD,CAAYxB,UAAU,wBAExB,yBAAKA,UAAU,6BACb,yBAAKA,UAAU,UACb,wBAAIsC,QAAS,SAACb,GAAD,OAAOK,EAAUL,EAAEW,OAAOG,eAAvC,YACA,wBAAID,QAAS,SAACb,GAAD,OAAOK,EAAUL,EAAEW,OAAOG,eAAvC,UACA,wBAAID,QAAS,SAACb,GAAD,OAAOK,EAAUL,EAAEW,OAAOG,eAAvC,YACA,wBAAID,QAAS,SAACb,GAAD,OAAOK,EAAUL,EAAEW,OAAOG,eAAvC,gBAEF,yBAAKvC,UAAU,qBAEjB,kBAAC,EAAD,CAAgBF,QAASA,EAASC,YAAaA,MCzDjDyC,G,MAAkB,IAmBTC,EAAa,SAACC,GA0BzB,YAzBgBC,IAAZD,IAEAF,EADEE,EAAQE,QAAQ,UAAY,GAAKF,EAAQE,QAAQ,UAAY,EAnBvD,0DAqBCF,EAAQE,QAAQ,WAAa,EAnB7B,uDAsBTF,EAAQE,QAAQ,kBAAoB,GACpCF,EAAQE,QAAQ,aAAe,EApBnC,kEAuBaF,EAAQE,QAAQ,SAAW,GAAKF,EAAQE,QAAQ,WAAa,EArB9D,qDAuBCF,EAAQE,QAAQ,SAAW,EAnB7B,qDAqBEF,EAAQE,QAAQ,YAAc,EAvB7B,wDAyBDF,EAAQE,QAAQ,SAAW,EArB5B,qDAuBCF,EAAQE,QAAQ,YAAc,EArB7B,0DAwBQ,MAIfJ,GCaMK,MAtDf,YAAyC,IAAD,gBAArBhC,EAAqB,EAArBA,KAAMd,EAAe,EAAfA,YACjB+C,EAAQ,UAAGjC,EAAKZ,eAAR,aAAG,EAAc8C,qBAAqB,GAC9CC,EAAW,UAAGjD,EAAYE,eAAf,aAAG,EAAqB8C,qBAAqB,GAC9D,OACE,yBAAK/C,UAAU,sBACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,uBACb,2CACA,+BACA,+BACA,gCAEF,+BACA,+BACA,gCAEF,yBAAKA,UAAU,iBACb,+BACA,yBAAKA,UAAU,mBACb,4BACGa,EAAKZ,QAAL,OACGY,QADH,IACGA,GADH,UACGA,EAAMZ,eADT,aACG,EAAegD,YADlB,UAEGlD,EAAYE,eAFf,aAEG,EAAqBgD,YACzB,uCAGJ,yBAAKjD,UAAU,iBACb,4BACGa,EAAKqC,SAAL,UAAgBrC,EAAKqC,gBAArB,aAAgB,EAAeC,KAA/B,UAAsCpD,EAAYmD,gBAAlD,aAAsC,EAAsBC,MAE/D,6BACGtC,EAAKqC,SAAL,UACGrC,EAAKqC,gBADR,aACG,EAAeE,UADlB,UAEGrD,EAAYmD,gBAFf,aAEG,EAAsBE,YAI9B,yBAAKpD,UAAU,iBACb,yBACEqD,IAAKxC,EAAKZ,QAAUwC,EAAWK,GAAYL,EAAWO,GACtDM,IAAI,SAEN,6BAAMzC,EAAKZ,QAAU6C,EAAWE,IAElC,+BACA,+BACA,+BACA,+BACA,kC,MCFOO,MA3Cf,WAAgB,IAAD,UACWpC,mBAAS,IADpB,mBACNN,EADM,KACA2C,EADA,OAEarC,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAG2BJ,mBAAS,IAHpC,mBAGNsC,EAHM,KAGQC,EAHR,OAIyBvC,mBAAS,IAJlC,mBAINpB,EAJM,KAIO4D,EAJP,KAMPC,EAAU,uCAAG,4BAAArD,EAAA,sEACSF,EAAa,UADtB,OACXsB,EADW,OAEjBgC,EAAehC,GAFE,2CAAH,qDAKVkC,EAAe,uCAAG,4BAAAtD,EAAA,sEACCO,EAAY,UADb,OAChBgD,EADgB,OAEtBJ,EAAgBI,EAASjC,SAFH,2CAAH,qDAKrBE,qBAAU,WACR6B,IACAC,MACC,IACH,IAOME,EAAsBzC,EAAM,GAAN,UACxBA,EAAM0C,KAAKC,MAAsB,GAAhBD,KAAKE,kBADE,iBACxB,EAAuCC,YADf,aACxB,EAA6CC,KADrB,UAExBX,EAAaO,KAAKC,MAAsB,GAAhBD,KAAKE,kBAFL,iBAExB,EAA8CC,YAFtB,aAExB,EAAoDC,KACxD,OACE,yBACEpE,UAAU,MACVqE,MAAO,CACL7B,gBAAgB,OAAD,OAASuB,EAAT,OAGjB,kBAAC,EAAD,CAASlD,KAAMA,EAAMd,YAAaA,IAClC,kBAAC,EAAD,CAAQkB,QAlBI,SAACJ,GACf2C,EAAQ3C,IAiBoBK,SAdb,SAACL,GAChBU,EAASV,IAauCd,YAAaA,MCjC7CuE,QACW,cAA7BC,OAAOrB,SAASsB,UAEe,UAA7BD,OAAOrB,SAASsB,UAEhBD,OAAOrB,SAASsB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e8d2dc34.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/WeatherDetails.css\";\r\n\r\nfunction WeatherDetails({ weather, defaultData }) {\r\n  return (\r\n    <div className=\"navbar__details__container\">\r\n      <div className=\"navbar__details__title\">\r\n        <div className=\"title\">\r\n          <h3>Weather Details</h3>\r\n        </div>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n      </div>\r\n      <div className=\"navbar__details__cloudy\">\r\n        <div className=\"cloudy\">\r\n          <h3>Cloudy</h3>\r\n        </div>\r\n        <span></span>\r\n        <span></span>\r\n        <div className=\"cloudy__value\">\r\n          <h3>\r\n            {weather.current\r\n              ? weather.current?.cloudcover\r\n              : defaultData.current?.cloudcover}\r\n            %\r\n          </h3>\r\n        </div>\r\n      </div>\r\n      <div className=\"navbar__details__Humidity\">\r\n        <div className=\"humidity\">\r\n          <h3>Humidity</h3>\r\n        </div>\r\n        <span></span>\r\n        <span></span>\r\n        <div className=\"humidity__value\">\r\n          <h3>\r\n            {weather.current\r\n              ? weather.current?.humidity\r\n              : defaultData.current?.humidity}\r\n            %\r\n          </h3>\r\n        </div>\r\n      </div>\r\n      <div className=\"navbar__details__Wind\">\r\n        <div className=\"wind\">\r\n          <h3>Wind</h3>\r\n        </div>\r\n        <span></span>\r\n        <span></span>\r\n        <div className=\"wind__value\">\r\n          <h3>\r\n            {weather.current\r\n              ? weather.current?.wind_speed\r\n              : defaultData.current?.wind_speed}\r\n            km/h\r\n          </h3>\r\n        </div>\r\n      </div>\r\n      <div className=\"navbar__details__Rain\">\r\n        <div className=\"rain\"></div>\r\n        <span></span>\r\n        <span></span>\r\n        <div className=\"rain__value\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherDetails;\r\n","import axios from \"axios\";\r\n\r\nconst URL = \"http://api.weatherstack.com/current\";\r\nconst API_KEY = \"eba5967570e8485f7bb1be336bdf1ed3\";\r\n\r\nexport const fetchWeather = async (query) => {\r\n  const { data } = await axios.get(URL, {\r\n    params: {\r\n      query: query,\r\n      units: \"m\",\r\n      access_key: API_KEY,\r\n    },\r\n  });\r\n  return data;\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst URL = \"https://api.unsplash.com/search/photos\";\r\nconst API_KEY = \"2xtQmTYUmVAuX1G1lUHMDdqr4vvWd0Vq54JRx9JUo1w\";\r\n\r\nexport const fetchPhotos = async (query) => {\r\n  const { data } = await axios.get(URL, {\r\n    params: {\r\n      query: query,\r\n      client_id: API_KEY,\r\n    },\r\n  });\r\n  return data;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport WeatherDetails from \"./WeatherDetails\";\r\nimport { fetchWeather } from \"../services/fetchWeather\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport \"../styles/Navbar.css\";\r\nimport { fetchPhotos } from \"../services/fetchPhotos\";\r\n\r\nfunction Navbar({ getData, getImage, defaultData }) {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [weather, setWeather] = useState({});\r\n  const [image, setImage] = useState({});\r\n\r\n  const search = async (e) => {\r\n    if (e.key === \"Enter\") {\r\n      const WeatherData = await fetchWeather(query);\r\n      const ImageLocation = await fetchPhotos(query);\r\n      setImage(ImageLocation.results);\r\n      setWeather(WeatherData);\r\n      setQuery(\"\");\r\n    }\r\n  };\r\n\r\n  const clickText = async (query) => {\r\n    const WeatherData = await fetchWeather(query);\r\n    const ImageLocation = await fetchPhotos(query);\r\n    setImage(ImageLocation.results);\r\n    setWeather(WeatherData);\r\n    setQuery(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    getImage(image);\r\n    getData(weather);\r\n  }, [getData, getImage, image, weather]);\r\n\r\n  return (\r\n    <div className=\"weather__navbar\">\r\n      <div className=\"weather__input__container\">\r\n        <Input\r\n          className=\"navbar__input\"\r\n          placeholder=\"Another Location\"\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          onKeyPress={search}\r\n        />\r\n        <SearchIcon className=\"navbar__searchIcon\" />\r\n      </div>\r\n      <div className=\"navbar__cities__container\">\r\n        <div className=\"cities\">\r\n          <h3 onClick={(e) => clickText(e.target.textContent)}>Istanbul</h3>\r\n          <h3 onClick={(e) => clickText(e.target.textContent)}>London</h3>\r\n          <h3 onClick={(e) => clickText(e.target.textContent)}>New York</h3>\r\n          <h3 onClick={(e) => clickText(e.target.textContent)}>Los Angeles</h3>\r\n        </div>\r\n        <div className=\"arrange__cities\"></div>\r\n      </div>\r\n      <WeatherDetails weather={weather} defaultData={defaultData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","let backgroundImage = \"\";\r\n\r\nconst sunny = \"https://bmcdn.nl/assets/weather-icons/all/clear-day.svg\";\r\n\r\nconst cloudy = \"https://bmcdn.nl/assets/weather-icons/all/cloudy.svg\";\r\n\r\nconst partly_cloudy =\r\n  \"https://bmcdn.nl/assets/weather-icons/all/partly-cloudy-day.svg\";\r\n\r\nconst rainy = \"https://bmcdn.nl/assets/weather-icons/all/rain.svg\";\r\n\r\nconst drizzle = \"https://bmcdn.nl/assets/weather-icons/all/drizzle.svg\";\r\n\r\nconst mist = \"https://bmcdn.nl/assets/weather-icons/all/mist.svg\";\r\n\r\nconst snowy = \"https://bmcdn.nl/assets/weather-icons/all/snow.svg\";\r\n\r\nconst thunder = \"https://bmcdn.nl/assets/weather-icons/all/thunderstorms\";\r\n\r\nexport const matchIcons = (subText) => {\r\n  if (subText !== undefined) {\r\n    if (subText.indexOf(\"Sunny\") >= 0 || subText.indexOf(\"Clear\") >= 0) {\r\n      backgroundImage = sunny;\r\n    } else if (subText.indexOf(\"Cloudy\") >= 0) {\r\n      backgroundImage = cloudy;\r\n    } else if (\r\n      subText.indexOf(\"Partly cloudy\") >= 0 ||\r\n      subText.indexOf(\"Overcast\") >= 0\r\n    ) {\r\n      backgroundImage = partly_cloudy;\r\n    } else if (subText.indexOf(\"Rain\") >= 0 || subText.indexOf(\"Shower\") >= 0) {\r\n      backgroundImage = rainy;\r\n    } else if (subText.indexOf(\"Mist\") >= 0) {\r\n      backgroundImage = mist;\r\n    } else if (subText.indexOf(\"Drizzle\") >= 0) {\r\n      backgroundImage = drizzle;\r\n    } else if (subText.indexOf(\"Snow\") >= 0) {\r\n      backgroundImage = snowy;\r\n    } else if (subText.indexOf(\"Thunder\") >= 0) {\r\n      backgroundImage = thunder;\r\n    } else {\r\n      backgroundImage = null;\r\n    }\r\n  }\r\n\r\n  return backgroundImage;\r\n};\r\n","import React from \"react\";\r\nimport \"../styles/Weather.css\";\r\nimport { matchIcons } from \"../utilities/matchIcons\";\r\n\r\nfunction Weather({ data, defaultData }) {\r\n  const dataDesc = data.current?.weather_descriptions[0];\r\n  const defaultDesc = defaultData.current?.weather_descriptions[0];\r\n  return (\r\n    <div className=\"weather__container\">\r\n      <div className=\"the__weather__section\">\r\n        <div className=\"the__weather__title\">\r\n          <h4>the.weather</h4>\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n        </div>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n      </div>\r\n      <div className=\"weather__info\">\r\n        <span></span>\r\n        <div className=\"weather__degree\">\r\n          <h1>\r\n            {data.current\r\n              ? data?.current?.temperature\r\n              : defaultData.current?.temperature}\r\n            <sup>°</sup>\r\n          </h1>\r\n        </div>\r\n        <div className=\"weather__city\">\r\n          <h1>\r\n            {data.location ? data.location?.name : defaultData.location?.name}\r\n          </h1>\r\n          <sub>\r\n            {data.location\r\n              ? data.location?.localtime\r\n              : defaultData.location?.localtime}\r\n          </sub>\r\n        </div>\r\n        {}\r\n        <div className=\"weather__logo\">\r\n          <img\r\n            src={data.current ? matchIcons(dataDesc) : matchIcons(defaultDesc)}\r\n            alt=\"icon\"\r\n          />\r\n          <sub>{data.current ? dataDesc : defaultDesc}</sub>\r\n        </div>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","import React, { useEffect, useState } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Weather from \"./components/Weather\";\nimport { fetchPhotos } from \"./services/fetchPhotos\";\nimport { fetchWeather } from \"./services/fetchWeather\";\nimport \"./styles/App.css\";\n\nfunction App() {\n  const [data, setData] = useState({});\n  const [image, setImage] = useState({});\n  const [defaultImage, setDefaultImage] = useState({});\n  const [defaultData, setDefaultData] = useState({});\n\n  const getDefault = async () => {\n    const WeatherData = await fetchWeather(\"London\");\n    setDefaultData(WeatherData);\n  };\n\n  const getDefaultImage = async () => {\n    const preImage = await fetchPhotos(\"London\");\n    setDefaultImage(preImage.results);\n  };\n\n  useEffect(() => {\n    getDefault();\n    getDefaultImage();\n  }, []);\n  const getData = (data) => {\n    setData(data);\n  };\n\n  const getImage = (data) => {\n    setImage(data);\n  };\n  const backgroundImageLink = image[0]\n    ? image[Math.floor(Math.random() * 10)]?.urls?.full\n    : defaultImage[Math.floor(Math.random() * 10)]?.urls?.full;\n  return (\n    <div\n      className=\"App\"\n      style={{\n        backgroundImage: `url(${backgroundImageLink})`,\n      }}\n    >\n      <Weather data={data} defaultData={defaultData} />\n      <Navbar getData={getData} getImage={getImage} defaultData={defaultData} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}